{"version":3,"sources":["serviceWorker.js","redux/app/appReducer.js","redux/app/appTypes.js","redux/country/countryReducer.js","redux/country/countryTypes.js","redux/global/globalReducer.js","redux/global/globalTypes.js","redux/rootReducer.js","redux/store.js","components/SideNav/SideNav.js","redux/app/appActions.js","components/Header/Header.js","components/UI/AlerctControl.js","components/UI/Loader.js","components/UI/SelectControl.js","utils/date.filter.js","constants.js","components/PercentAreaChart/PercentAreaChart.js","components/UI/DatePickerControl.js","components/SimpleAreaChart/SimpleAreaChart.js","utils/case.filter.js","utils/helpers.functions.js","redux/global/globalActions.js","pages/GlobalStatistics.js","redux/country/countryActions.js","pages/CountryStatistics.js","pages/About.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","navTrigger","navLinks","name","url","loading","alert","handlers","state","payload","appReducer","action","handler","type","DEFAULT","currentCountry","caseType","countriesList","data","filteredData","dateFrom","dateFromRange","min","max","Date","countryReducer","dateTo","dateToRange","globalReducer","rootReducer","combineReducers","app","country","global","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","useStyles","makeStyles","createStyles","list","width","activeListItem","textDecoration","withRouter","links","trigger","closeDrawerHandler","history","classes","Drawer","anchor","open","onClose","List","className","map","link","ListItem","key","button","onClick","pathname","push","ListItemText","primary","showAlert","text","timeout","dispatch","setTimeout","theme","root","flexGrow","menuButton","marginRight","spacing","title","Header","useDispatch","useSelector","onToggleDrawer","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Typography","variant","marginTop","AlertControl","Alert","severity","marginLeft","Loader","Box","m","height","CircularProgress","formControl","margin","minWidth","React","memo","value","label","items","handleChange","FormControl","InputLabel","id","Select","labelId","onChange","MenuItem","dateFilter","options","Intl","DateTimeFormat","format","COVID_API_URL","CASE_TYPES","default","confirmed","deaths","recovered","active","CASE_TYPES_COLORS","CHART_OPTIONS","left","right","top","bottom","backgroundColor","padding","toDate","date","toPercent","decimal","fixed","toFixed","renderTooltipContent","o","total","reduce","result","entry","style","index","getPercent","stackOffset","strokeDasharray","dataKey","tickFormatter","content","stackId","stroke","fill","DatePickerControl","minDate","maxDate","changeHandle","utils","DateFnsUtils","disableToolbar","KeyboardButtonProps","fontSize","caseFilter","Object","keys","item","toTimeStamp","getTime","storageSetItem","sessionStorage","setItem","storageGetItem","getItem","getCaseItems","c","toUpperCase","substring","dateToISOString","d","setUTCHours","toISOString","calculateDaysData","daysAmount","operation","copy","Number","setDate","getDate","STORAGE_KEYS","filteredGlobalByDate","fetchDateFrom","fetchDateTo","length","filter","dateTS","setDateFromRange","setDateToRange","fetchCase","savedCase","to","savedDateTo","from","savedDateFrom","box","display","flexDirection","alignItems","controlsPanel","justifyContent","textAlign","useEffect","a","fetch","then","response","json","startDate","globalData","sort","b","TotalConfirmed","TotalRecovered","TotalDeaths","NewConfirmed","NewDeaths","NewRecovered","console","log","queryString","path","trim","component","Grid","container","selectDateFrom","selectDateTo","target","selectCase","fetchCurrentCountry","savedCountry","fetchCountryCase","fetchCountryData","updateCountry","removeItem","byCountry","Active","Recovered","Deaths","Confirmed","savedCountries","countries","JSON","parse","Country","Slug","localeCompare","stringify","setRangeDate","fetchCountryDateFrom","byCountryErrorHandler","countryData","filteredCountryByDate","updateCountryDateFrom","caseValue","maxWidth","About","styles","gutterBottom","App","Container","exact","GlobalStatistics","CountryStatistics","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a12bd614.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n                console.log(\n                    'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n\n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n\n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {'Service-Worker': 'script'},\n  })\n      .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n  }\n}\n","import {\r\n  HIDE_ALERT,\r\n  HIDE_LOADING,\r\n  SHOW_ALERT,\r\n  SHOW_LOADING,\r\n  TOGGLE_NAVIGATION\r\n} from './appTypes'\r\n\r\nconst initialState = {\r\n  navTrigger: false,\r\n  navLinks: [\r\n    {name: 'World', url: '/'},\r\n    {name: 'By country', url: '/country'},\r\n    {name: 'About', url: '/about'}\r\n  ],\r\n  loading: false,\r\n  alert: null\r\n}\r\n\r\nconst handlers = {\r\n  [TOGGLE_NAVIGATION]: state => ({...state, navTrigger: !state.navTrigger}),\r\n  [SHOW_LOADING]: state => ({...state, loading: true}),\r\n  [HIDE_LOADING]: state => ({...state, loading: false}),\r\n  [SHOW_ALERT]: (state, {payload}) => ({...state, alert: payload}),\r\n  [HIDE_ALERT]: state => ({...state, alert: null}),\r\n  DEFAULT: state => state\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT\r\n  return handler(state, action)\r\n}\r\n\r\nexport default appReducer\r\n","export const SHOW_LOADING = 'APP/SHOW_LOADING'\r\nexport const HIDE_LOADING = 'APP/HIDE_LOADING'\r\n\r\nexport const SHOW_ALERT = 'APP/SHOW_ALERT'\r\nexport const HIDE_ALERT = 'APP/HIDE_ALERT'\r\n\r\nexport const TOGGLE_NAVIGATION = 'APP/TOGGLE_NAVIGATION'\r\n","import {\r\n  FETCH_BY_COUNTRY,\r\n  FETCH_COUNTRIES,\r\n  FILTERED_DATA,\r\n  SELECT_CASE,\r\n  SELECT_COUNTRY,\r\n  SELECT_DATE_FROM,\r\n  SELECT_DATE_FROM_RANGE\r\n} from './countryTypes'\r\n\r\nconst initialState = {\r\n  currentCountry: '',\r\n  caseType: '',\r\n  countriesList: [],\r\n  data: [],\r\n  filteredData: [],\r\n  dateFrom: null,\r\n  dateFromRange: {\r\n    min: null,\r\n    max: null\r\n  }\r\n}\r\n\r\nconst handlers = {\r\n  [FETCH_COUNTRIES]: (state, {payload}) => (\r\n    {...state, countriesList: payload}\r\n  ),\r\n  [FETCH_BY_COUNTRY]: (state, {payload}) => (\r\n    {...state, data: payload}\r\n  ),\r\n  [SELECT_DATE_FROM_RANGE]: (state, {payload}) => (\r\n    {...state, dateFromRange: {...payload}}\r\n  ),\r\n  [SELECT_DATE_FROM]: (state, {payload}) => (\r\n    {...state, dateFrom: new Date(payload)}\r\n  ),\r\n  [SELECT_COUNTRY]: (state, {payload}) => (\r\n    {...state, currentCountry: payload}\r\n  ),\r\n  [SELECT_CASE]: (state, {payload}) => (\r\n    {...state, caseType: payload}\r\n  ),\r\n  [FILTERED_DATA]: (state, {payload}) => (\r\n    {...state, filteredData: payload}\r\n  ),\r\n  DEFAULT: state => state\r\n}\r\n\r\nconst countryReducer = (state = initialState, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT\r\n  return handler(state, action)\r\n}\r\n\r\nexport default countryReducer\r\n","export const FETCH_COUNTRIES = 'COUNTRY/FETCH_COUNTRIES'\r\nexport const FETCH_BY_COUNTRY = 'COUNTRY/FETCH_BY_COUNTRY'\r\n\r\nexport const SELECT_COUNTRY = 'COUNTRY/SELECT_COUNTRY'\r\nexport const SELECT_CASE = 'COUNTRY/SELECT_CASE'\r\nexport const SELECT_DATE_FROM = 'COUNTRY/SELECT_DATE_FROM'\r\nexport const SELECT_DATE_FROM_RANGE = 'COUNTRY/SELECT_DATE_FROM_RANGE'\r\n\r\nexport const FILTERED_DATA = 'COUNTRY/FILTERED_DATA'\r\n","import {\r\n  FETCH_DATA,\r\n  SELECT_CASE,\r\n  SET_DATE_FROM_RANGE,\r\n  SET_DATE_TO_RANGE,\r\n  SELECT_DATE_FROM,\r\n  SELECT_DATE_TO,\r\n  FILTERED_DATA\r\n} from './globalTypes'\r\n\r\nconst initialState = {\r\n  caseType: '',\r\n  data: [],\r\n  filteredData: [],\r\n  dateFrom: null,\r\n  dateTo: null,\r\n  dateFromRange: {\r\n    min: null,\r\n    max: null\r\n  },\r\n  dateToRange: {\r\n    min: null,\r\n    max: null\r\n  }\r\n}\r\n\r\nconst handlers = {\r\n  [FETCH_DATA]: (state, {payload}) => (\r\n    {...state, data: payload}\r\n  ),\r\n  [FILTERED_DATA]: (state, {payload}) => (\r\n    {...state, filteredData: payload}\r\n  ),\r\n  [SELECT_CASE]: (state, {payload}) => (\r\n    {...state, caseType: payload}\r\n  ),\r\n  [SELECT_DATE_FROM]: (state, {payload}) => (\r\n    {...state, dateFrom: payload}\r\n  ),\r\n  [SELECT_DATE_TO]: (state, {payload}) => (\r\n    {...state, dateTo: payload}\r\n  ),\r\n  [SET_DATE_FROM_RANGE]: (state, {payload}) => (\r\n    {...state, dateFromRange: {...payload}}\r\n  ),\r\n  [SET_DATE_TO_RANGE]: (state, {payload}) => (\r\n    {...state, dateToRange: {...payload}}\r\n  ),\r\n  DEFAULT: state => state\r\n}\r\n\r\nconst globalReducer = (state = initialState, action) => {\r\n  const handler = handlers[action.type] || handlers.DEFAULT\r\n  return handler(state, action)\r\n}\r\n\r\nexport default globalReducer\r\n","export const FETCH_DATA = 'GLOBAL/FETCH_DATA'\r\n\r\nexport const SET_DATE_FROM_RANGE = 'GLOBAL/SET_DATE_FROM_RANGE'\r\nexport const SET_DATE_TO_RANGE = 'GLOBAL/SET_DATE_TO_RANGE'\r\n\r\nexport const SELECT_CASE = 'GLOBAL/SELECT_CASE'\r\nexport const SELECT_DATE_FROM = 'GLOBAL/SELECT_DATE_FROM'\r\nexport const SELECT_DATE_TO = 'GLOBAL/SELECT_DATE_TO'\r\n\r\nexport const FILTERED_DATA = 'GLOBAL/FILTERED_DATA'\r\n","import {combineReducers} from 'redux'\r\nimport appReducer from './app/appReducer'\r\nimport countryReducer from './country/countryReducer'\r\nimport globalReducer from './global/globalReducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  app: appReducer,\r\n  country: countryReducer,\r\n  global: globalReducer\r\n})\r\n\r\nexport default rootReducer\r\n","import {applyMiddleware, compose, createStore} from 'redux'\r\nimport rootReducer from './rootReducer'\r\n// import {logger} from 'redux-logger'\r\nimport thunk from 'redux-thunk'\r\n\r\nconst composeEnhancers =\r\n  typeof window === 'object' &&\r\n  window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ?\r\n    window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n    }) : compose\r\n\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(\r\n        applyMiddleware(\r\n            thunk,\r\n            // logger\r\n        )\r\n    )\r\n)\r\n\r\nexport default store\r\n","import React from 'react'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport {ListItem} from '@material-ui/core'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    list: {\r\n      width: 250,\r\n    },\r\n    activeListItem: {\r\n      textDecoration: 'underline'\r\n    }\r\n  }),\r\n)\r\n\r\nconst SideNav = ({links, trigger, closeDrawerHandler, history}) => {\r\n  const classes = useStyles()\r\n\r\n  const clickItemHandler = (url) => {\r\n    closeDrawerHandler()\r\n    if (url !== history.location.pathname) {\r\n      history.push(url)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Drawer anchor='left' open={trigger} onClose={closeDrawerHandler}>\r\n      <List className={classes.list}>\r\n        {links.map((link) => (\r\n          <ListItem\r\n            key={link.name}\r\n            button\r\n            onClick={() => clickItemHandler(link.url)} >\r\n            <ListItemText\r\n              primary={link.name}\r\n              className={link.url === history.location.pathname\r\n                ? classes.activeListItem\r\n                : null}/>\r\n          </ListItem>\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  )\r\n}\r\n\r\nexport default withRouter(SideNav)\r\n","import {\r\n  HIDE_ALERT,\r\n  HIDE_LOADING,\r\n  SHOW_ALERT,\r\n  SHOW_LOADING,\r\n  TOGGLE_NAVIGATION\r\n} from './appTypes'\r\n\r\nexport const showLoading = () => ({type: SHOW_LOADING})\r\nexport const hideLoading = () => ({type: HIDE_LOADING})\r\n\r\nexport const toggleNavigation = () => ({type: TOGGLE_NAVIGATION})\r\n\r\nexport const showAlert = (text, timeout = 3000) => {\r\n  return dispatch => {\r\n    dispatch({type: SHOW_ALERT, payload: text})\r\n\r\n    setTimeout(() => {\r\n      dispatch({type: HIDE_ALERT})\r\n    }, timeout)\r\n  }\r\n}\r\n","import React from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {createStyles, makeStyles} from '@material-ui/core/styles'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\n\r\nimport SideNav from '../SideNav/SideNav'\r\nimport {toggleNavigation} from '../../redux/app/appActions'\r\n\r\nconst useStyles = makeStyles((theme) =>\r\n  createStyles({\r\n    root: {\r\n      flexGrow: 1,\r\n    },\r\n    menuButton: {\r\n      marginRight: theme.spacing(2),\r\n    },\r\n    title: {\r\n      flexGrow: 1\r\n    },\r\n    list: {\r\n      width: 250,\r\n    }\r\n  }),\r\n)\r\n\r\nconst Header = () => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const navLinks = useSelector(({app}) => app.navLinks)\r\n  const navTrigger = useSelector(({app}) => app.navTrigger)\r\n\r\n  const onToggleDrawer = () => {\r\n    dispatch(toggleNavigation())\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n            onClick={onToggleDrawer}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n\r\n          <Typography variant=\"h6\" className={classes.title}>\r\n            Covid-19\r\n          </Typography>\r\n\r\n          <SideNav\r\n            trigger={navTrigger}\r\n            links={navLinks}\r\n            closeDrawerHandler={onToggleDrawer}\r\n          />\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Alert from '@material-ui/lab/Alert'\r\nimport {useSelector} from 'react-redux'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}))\r\n\r\nconst AlertControl = () => {\r\n  const classes = useStyles();\r\n  const alert = useSelector(({app}) => app.alert)\r\n\r\n  if (!alert) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Alert severity=\"error\">{alert}</Alert>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AlertControl\r\n","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport CircularProgress from '@material-ui/core/CircularProgress'\r\nimport Box from '@material-ui/core/Box'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    'display': 'flex',\r\n    'justifyContent': 'center',\r\n    'alignItems': 'center',\r\n    'zIndex': -1,\r\n    '& > * + *': {\r\n      marginLeft: theme.spacing(2),\r\n    },\r\n  },\r\n}))\r\n\r\nconst Loader = () => {\r\n  const classes = useStyles()\r\n\r\n  return (\r\n    <Box className={classes.root} m={1} height={100}>\r\n      <CircularProgress />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import React from 'react'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport Select from '@material-ui/core/Select'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  }\r\n}));\r\n\r\nconst SelectControl = ({value, label, items, handleChange}) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id={`select-label-${label}`}>{label}</InputLabel>\r\n        <Select\r\n          labelId={`select-label-${label}`}\r\n          id={`select-${label}`}\r\n          value={value}\r\n          onChange={handleChange}\r\n        >\r\n          { items.map(({value, title}) => (\r\n            <MenuItem key={value} value={value}>{title}</MenuItem>\r\n          )) }\r\n        </Select>\r\n      </FormControl>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default React.memo(SelectControl)\r\n","export default function dateFilter(value) {\r\n  const options = {}\r\n\r\n  options.month = 'numeric'\r\n  options.day = 'numeric'\r\n  options.year = '2-digit'\r\n\r\n  return new Intl.DateTimeFormat('ua-EN', options).format(new Date(value))\r\n}\r\n","export const COVID_API_URL = 'https://api.covid19api.com'\r\n\r\nexport const DEFAULT_COUNTRY = 'ukraine'\r\n\r\nexport const CASE_TYPES = {\r\n  default: 'all',\r\n  confirmed: 'confirmed',\r\n  deaths: 'deaths',\r\n  recovered: 'recovered',\r\n  active: 'active'\r\n}\r\n\r\nexport const CASE_TYPES_COLORS = {\r\n  confirmed: '#8884d8',\r\n  deaths: '#d32f2f',\r\n  recovered: '#82ca9d',\r\n  active: '#ffc658'\r\n}\r\n\r\nexport const CHART_OPTIONS = {\r\n  width: 800,\r\n  height: 400,\r\n  offsets: {\r\n    left: 0,\r\n    right: 30,\r\n    top: 30,\r\n    bottom: 0\r\n  },\r\n  tooltip: {\r\n    backgroundColor: '#f1f1f1',\r\n    padding: '0.5rem'\r\n  },\r\n  dataKey: 'date'\r\n}\r\n","import React from 'react'\r\nimport {AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip} from 'recharts'\r\nimport dateFilter from '../../utils/date.filter'\r\nimport {CASE_TYPES_COLORS, CHART_OPTIONS} from '../../constants'\r\n\r\nconst getPercent = (value, total) => {\r\n  const ratio = total > 0 ? value / total : 0\r\n\r\n  return toPercent(ratio, 2)\r\n}\r\n\r\nconst toDate = (date) => dateFilter(date)\r\nconst toPercent = (decimal, fixed = 0) => `${(decimal * 100).toFixed(fixed)}%`\r\nconst renderTooltipContent = (o) => {\r\n  const {payload, label} = o\r\n  const date = label ? dateFilter(label) : label\r\n  const total = payload.reduce((result, entry) => (result + entry.value), 0)\r\n\r\n  return (\r\n    <div\r\n      className=\"customized-tooltip-content\"\r\n      style={{\r\n        backgroundColor: CHART_OPTIONS.tooltip.backgroundColor,\r\n        padding: CHART_OPTIONS.tooltip.padding\r\n      }}\r\n    >\r\n      <p className=\"total\">{`${date} (Total: ${total})`}</p>\r\n      <ul className=\"list\">\r\n        {\r\n          payload.map((entry, index) => (\r\n            <li key={`item-${index}`} style={{color: entry.color}}>\r\n              {\r\n                `${entry.name}: ${entry.value}\r\n              (${getPercent(entry.value, total)})`\r\n              }\r\n            </li>\r\n          ))\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst PercentAreaChart = ({data}) => {\r\n  return (\r\n    <AreaChart\r\n      width={CHART_OPTIONS.width}\r\n      height={CHART_OPTIONS.height}\r\n      margin={{...CHART_OPTIONS.offsets}}\r\n      data={data}\r\n      stackOffset=\"expand\"\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\"/>\r\n      <XAxis dataKey={CHART_OPTIONS.dataKey} tickFormatter={toDate }/>\r\n      <YAxis tickFormatter={toPercent} />\r\n      <Tooltip content={renderTooltipContent}/>\r\n      <Area\r\n        type=\"monotone\"\r\n        dataKey=\"deaths\"\r\n        stackId=\"1\"\r\n        stroke={CASE_TYPES_COLORS.deaths}\r\n        fill={CASE_TYPES_COLORS.deaths}\r\n      />\r\n      <Area\r\n        type=\"monotone\"\r\n        dataKey=\"active\"\r\n        stackId=\"1\"\r\n        stroke={CASE_TYPES_COLORS.active}\r\n        fill={CASE_TYPES_COLORS.active}/>\r\n      <Area\r\n        type=\"monotone\"\r\n        dataKey=\"recovered\"\r\n        stackId=\"1\"\r\n        stroke={CASE_TYPES_COLORS.recovered}\r\n        fill={CASE_TYPES_COLORS.recovered}/>\r\n    </AreaChart>\r\n  )\r\n}\r\n\r\nexport default React.memo(PercentAreaChart)\r\n","import React from 'react'\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers'\r\n\r\nconst DatePickerControl = ({value, label, minDate, maxDate, changeHandle}) => {\r\n  return (\r\n    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n      <KeyboardDatePicker\r\n        disableToolbar\r\n        variant=\"inline\"\r\n        format=\"dd.MM.yyyy\"\r\n        margin=\"normal\"\r\n        label={label}\r\n        value={value}\r\n        minDate={minDate}\r\n        maxDate={maxDate}\r\n        onChange={changeHandle}\r\n        KeyboardButtonProps={{\r\n          'aria-label': 'change date',\r\n        }}\r\n      />\r\n    </MuiPickersUtilsProvider>\r\n  )\r\n}\r\n\r\nexport default DatePickerControl\r\n","import React from 'react'\r\nimport {\r\n  AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip\r\n} from 'recharts'\r\nimport {CASE_TYPES_COLORS, CHART_OPTIONS} from '../../constants'\r\n\r\nconst SimpleAreaChart = ({caseType, data}) => {\r\n  return (\r\n    <AreaChart\r\n      width={CHART_OPTIONS.width}\r\n      height={CHART_OPTIONS.height}\r\n      margin={{...CHART_OPTIONS.offsets}}\r\n      data={data}\r\n    >\r\n      <CartesianGrid strokeDasharray=\"3 3\"/>\r\n      <XAxis dataKey={CHART_OPTIONS.dataKey} />\r\n      <YAxis width={100} fontSize={12} />\r\n      <Tooltip/>\r\n      <Area\r\n        type=\"monotone\"\r\n        dataKey={caseType}\r\n        stroke={CASE_TYPES_COLORS[caseType]}\r\n        fill={CASE_TYPES_COLORS[caseType]}\r\n      />\r\n    </AreaChart>\r\n  )\r\n}\r\n\r\nexport default React.memo(SimpleAreaChart)\r\n","import {CASE_TYPES} from '../constants'\r\nimport dateFilter from './date.filter'\r\n\r\nexport function caseFilter(data, caseType) {\r\n  if (caseType === CASE_TYPES.default) {\r\n    return\r\n  }\r\n\r\n  return Object.keys(data)\r\n      .map((item, index) => ({\r\n        date: dateFilter(data[index].date),\r\n        [caseType]: data[index][caseType]\r\n      }))\r\n}\r\n","import {CASE_TYPES} from '../constants'\r\n\r\nexport function toTimeStamp(value) {\r\n  return new Date(value).getTime()\r\n}\r\n\r\nexport function storageSetItem(key, value) {\r\n  window.sessionStorage.setItem(key, value)\r\n}\r\n\r\nexport function storageGetItem(key) {\r\n  return window.sessionStorage.getItem(key)\r\n}\r\n\r\nexport function storageRemoveItem(key) {\r\n  return window.sessionStorage.removeItem(key)\r\n}\r\n\r\nexport function getCaseItems() {\r\n  return Object.keys(CASE_TYPES).map(c => ({\r\n    value: CASE_TYPES[c],\r\n    title: CASE_TYPES[c][0].toUpperCase() + CASE_TYPES[c].substring(1)\r\n  }))\r\n}\r\n\r\nexport function dateToISOString(date) {\r\n  const d = new Date(date)\r\n  d.setUTCHours(0, 0, 0, 0)\r\n  return d.toISOString()\r\n}\r\n\r\nexport function calculateDaysData(date, daysAmount, operation = 'add') {\r\n  date = new Date(date)\r\n  const copy = new Date(Number(date))\r\n  if (operation === 'add') {\r\n    copy.setDate(date.getDate() + daysAmount)\r\n  } else if (operation === 'sub') {\r\n    copy.setDate(date.getDate() - daysAmount)\r\n  }\r\n  return copy\r\n}\r\n","import {\r\n  FETCH_DATA,\r\n  SELECT_CASE,\r\n  SET_DATE_FROM_RANGE,\r\n  SET_DATE_TO_RANGE,\r\n  SELECT_DATE_FROM,\r\n  SELECT_DATE_TO,\r\n  FILTERED_DATA\r\n} from './globalTypes'\r\nimport {\r\n  calculateDaysData,\r\n  dateToISOString,\r\n  storageGetItem,\r\n  storageSetItem,\r\n  toTimeStamp\r\n} from '../../utils/helpers.functions'\r\nimport {hideLoading, showAlert, showLoading} from '../app/appActions'\r\nimport {CASE_TYPES, COVID_API_URL} from '../../constants'\r\n\r\nconst STORAGE_KEYS = {\r\n  dateRange: 'globalDatesRange',\r\n  dateFrom: 'globalDateFrom',\r\n  dateTo: 'globalDateTo',\r\n  case: 'globalCase'\r\n}\r\n\r\nexport const fetchGlobalStatistics = () => {\r\n  return async dispatch => {\r\n    dispatch(showLoading())\r\n    let globalData\r\n\r\n    try {\r\n      await fetch(`${COVID_API_URL}/world`)\r\n          .then(response => response.json())\r\n          .then((data) => {\r\n            const startDate = calculateDaysData(new Date, data.length, 'sub')\r\n\r\n            globalData = data\r\n                .sort((a, b) => {\r\n                  if (a.TotalConfirmed < b.TotalConfirmed) {\r\n                    return -1\r\n                  }\r\n                })\r\n                .map((\r\n                    {\r\n                      TotalRecovered, TotalDeaths, TotalConfirmed,\r\n                      NewConfirmed, NewDeaths, NewRecovered\r\n                    }\r\n                    , index) => ({\r\n                  recovered: TotalRecovered,\r\n                  deaths: TotalDeaths,\r\n                  confirmed: TotalConfirmed,\r\n                  active: (NewConfirmed + NewDeaths + NewRecovered),\r\n                  date: dateToISOString(calculateDaysData(\r\n                      startDate,\r\n                      index,\r\n                      'add'\r\n                  ))\r\n                }))\r\n          })\r\n\r\n      dispatch({\r\n        type: FETCH_DATA,\r\n        payload: globalData\r\n      })\r\n\r\n      dispatch(filteredGlobalByDate(\r\n          globalData,\r\n          storageGetItem(STORAGE_KEYS.dateFrom),\r\n          storageGetItem(STORAGE_KEYS.dateTo))\r\n      )\r\n\r\n      dispatch(hideLoading())\r\n    } catch (e) {\r\n      console.log(e)\r\n      dispatch(showAlert(`Something went wrong with data fetching...`, 8000))\r\n    }\r\n  }\r\n}\r\n\r\nexport const selectDateFrom = (from) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.dateFrom, from)\r\n    dispatch({\r\n      type: SELECT_DATE_FROM,\r\n      payload: from\r\n    })\r\n  }\r\n}\r\n\r\nexport const selectDateTo = (to) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.dateTo, to)\r\n    dispatch({\r\n      type: SELECT_DATE_TO,\r\n      payload: to\r\n    })\r\n  }\r\n}\r\n\r\nexport const selectCase = (caseType) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.case, caseType)\r\n    dispatch({\r\n      type: SELECT_CASE,\r\n      payload: caseType\r\n    })\r\n  }\r\n}\r\n\r\nexport const filteredGlobalByDate = (data, dateFrom, dateTo) => {\r\n  return dispatch => {\r\n    let filteredData = data\r\n\r\n    dispatch(fetchDateFrom(data[0].date))\r\n    dispatch(fetchDateTo(data[data.length - 1].date))\r\n\r\n    if (dateFrom && dateTo) {\r\n      storageSetItem(STORAGE_KEYS.dateFrom, dateToISOString(dateFrom))\r\n      storageSetItem(STORAGE_KEYS.dateTo, dateToISOString(dateTo))\r\n\r\n      filteredData = data.filter(item => {\r\n        const dateTS = toTimeStamp(item.date)\r\n        return (\r\n          dateTS >= toTimeStamp(dateFrom)\r\n          && dateTS <= toTimeStamp(dateTo)\r\n        )\r\n      })\r\n    }\r\n\r\n    const minDate = data[0].date\r\n    const maxDate = data[data.length - 1].date\r\n\r\n    dispatch(setDateFromRange(\r\n        minDate,\r\n        filteredData[filteredData.length - 1].date)\r\n    )\r\n    dispatch(setDateToRange(\r\n        filteredData[0].date,\r\n        maxDate)\r\n    )\r\n\r\n    dispatch(fetchCase(CASE_TYPES.default))\r\n    dispatch({type: FILTERED_DATA, payload: filteredData})\r\n  }\r\n}\r\n\r\nconst fetchCase = (caseType) => {\r\n  return dispatch => {\r\n    const savedCase = storageGetItem(STORAGE_KEYS.case)\r\n\r\n    dispatch({\r\n      type: SELECT_CASE,\r\n      payload: savedCase ? savedCase : caseType\r\n    })\r\n  }\r\n}\r\n\r\nconst fetchDateTo = (to) => {\r\n  return dispatch => {\r\n    const savedDateTo = storageGetItem(STORAGE_KEYS.dateTo)\r\n\r\n    dispatch({\r\n      type: SELECT_DATE_TO,\r\n      payload: savedDateTo ?? to\r\n    })\r\n  }\r\n}\r\n\r\nconst fetchDateFrom = (from) => {\r\n  return dispatch => {\r\n    const savedDateFrom = storageGetItem(STORAGE_KEYS.dateFrom)\r\n    dispatch({\r\n      type: SELECT_DATE_FROM,\r\n      payload: savedDateFrom ?? from\r\n    })\r\n  }\r\n}\r\n\r\nconst setDateFromRange = (minDate, maxDate) => ({\r\n  type: SET_DATE_FROM_RANGE,\r\n  payload: {min: minDate, max: maxDate}\r\n})\r\n\r\nconst setDateToRange = (minDate, maxDate) => ({\r\n  type: SET_DATE_TO_RANGE,\r\n  payload: {min: minDate, max: maxDate}\r\n})\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Box from '@material-ui/core/Box'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\nimport Loader from '../components/UI/Loader'\r\nimport SelectControl from '../components/UI/SelectControl'\r\nimport PercentAreaChart from '../components/PercentAreaChart/PercentAreaChart'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport DatePickerControl from '../components/UI/DatePickerControl'\r\nimport SimpleAreaChart from '../components/SimpleAreaChart/SimpleAreaChart'\r\nimport {CASE_TYPES} from '../constants'\r\nimport {caseFilter} from '../utils/case.filter'\r\nimport {getCaseItems} from '../utils/helpers.functions'\r\nimport {\r\n  selectDateFrom,\r\n  selectDateTo,\r\n  selectCase,\r\n  filteredGlobalByDate,\r\n  fetchGlobalStatistics\r\n} from '../redux/global/globalActions'\r\nimport dateFilter from '../utils/date.filter'\r\nimport {withRouter} from 'react-router-dom'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  box: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  controlsPanel: {\r\n    margin: '1rem auto',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly'\r\n  },\r\n  title: {\r\n    margin: '1.5rem auto 0',\r\n    textAlign: 'center'\r\n  }\r\n}))\r\n\r\nconst GlobalStatistics = ({history, match}) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector(({app}) => app.loading)\r\n\r\n  const data = useSelector(({global}) => global.data)\r\n  const filteredData = useSelector(({global}) => global.filteredData)\r\n\r\n  const dateFromRange = useSelector(({global}) => global.dateFromRange)\r\n  const dateToRange = useSelector(({global}) => global.dateToRange)\r\n  const dateFrom = useSelector(({global}) => global.dateFrom)\r\n  const dateTo = useSelector(({global}) => global.dateTo)\r\n\r\n  const caseType = useSelector(({global}) => global.caseType)\r\n\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchGlobalStatistics())\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line\r\n    const queryString = `${match.path}?from=${dateFilter(dateFrom)}&to=${dateFilter(dateTo)}&case=${caseType}`.trim()\r\n    history.push(queryString)\r\n  }, [dateFrom, dateTo, caseType])\r\n\r\n  const onDateFromChange = (from) => {\r\n    dispatch(selectDateFrom(from))\r\n    dispatch(filteredGlobalByDate(data, from, dateTo))\r\n  }\r\n\r\n  const onDateToChange = (to) => {\r\n    dispatch(selectDateTo(to))\r\n    dispatch(filteredGlobalByDate(data, dateFrom, to))\r\n  }\r\n\r\n  const onCaseChange = ({target}) => {\r\n    dispatch(selectCase(target.value))\r\n  }\r\n\r\n  return (\r\n    <Box m={1} className={classes.box}>\r\n      <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\r\n        Covid-19 Global World WIP Statistics\r\n      </Typography>\r\n\r\n      {loading || !data.length\r\n        ? <Loader/>\r\n        :\r\n        <>\r\n          <Grid container className={classes.controlsPanel}>\r\n            <DatePickerControl\r\n              changeHandle={onDateFromChange}\r\n              value={dateFrom}\r\n              minDate={dateFromRange.min}\r\n              maxDate={dateFromRange.max}\r\n              label={'Date from'}\r\n            />\r\n            <DatePickerControl\r\n              changeHandle={onDateToChange}\r\n              value={dateTo}\r\n              minDate={dateToRange.min}\r\n              maxDate={dateToRange.max}\r\n              label={'Date to'}\r\n            />\r\n            <SelectControl\r\n              value={caseType}\r\n              items={getCaseItems()}\r\n              label={'Cases'}\r\n              handleChange={onCaseChange}\r\n            />\r\n          </Grid>\r\n          {\r\n            caseType !== CASE_TYPES.default\r\n              ? <SimpleAreaChart\r\n                data={caseFilter(filteredData, caseType)}\r\n                caseType={caseType}\r\n              />\r\n              : <PercentAreaChart data={filteredData}/>\r\n          }\r\n        </>\r\n      }\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default withRouter(GlobalStatistics)\r\n","import {\r\n  FETCH_BY_COUNTRY,\r\n  FETCH_COUNTRIES,\r\n  FILTERED_DATA,\r\n  SELECT_CASE,\r\n  SELECT_COUNTRY,\r\n  SELECT_DATE_FROM,\r\n  SELECT_DATE_FROM_RANGE\r\n} from './countryTypes'\r\nimport {hideLoading, showAlert, showLoading} from '../app/appActions'\r\nimport {CASE_TYPES, COVID_API_URL, DEFAULT_COUNTRY} from '../../constants'\r\nimport {\r\n  storageGetItem, storageRemoveItem,\r\n  storageSetItem,\r\n  toTimeStamp\r\n} from '../../utils/helpers.functions'\r\n\r\nconst STORAGE_KEYS = {\r\n  countries: 'countries',\r\n  country: 'currentCountry',\r\n  dateFrom: 'countryDateFrom',\r\n  case: 'countryCase'\r\n}\r\n\r\nexport const fetchCountries = () => {\r\n  return async dispatch => {\r\n    try {\r\n      let countries\r\n      const savedCountries = window.sessionStorage.getItem(\r\n          STORAGE_KEYS.countries\r\n      )\r\n\r\n      if (savedCountries) {\r\n        countries = JSON.parse(savedCountries)\r\n        dispatch({type: FETCH_COUNTRIES, payload: countries})\r\n        return\r\n      }\r\n\r\n      await fetch(`${COVID_API_URL}/countries`)\r\n          .then(response => {\r\n            return response.json()\r\n          })\r\n          .then((data) => {\r\n            countries = data\r\n                .map(country => ({\r\n                  title: country.Country,\r\n                  value: country.Slug\r\n                }))\r\n                .sort((a, b) => a.value.localeCompare(b.value))\r\n          })\r\n\r\n      window.sessionStorage.setItem(\r\n          STORAGE_KEYS.countries, JSON.stringify(countries)\r\n      )\r\n\r\n      dispatch({type: FETCH_COUNTRIES, payload: countries})\r\n    } catch (e) {\r\n      dispatch(showAlert('Something went wrong...'))\r\n    }\r\n  }\r\n}\r\n\r\nexport const fetchCurrentCountry = (country) => {\r\n  return dispatch => {\r\n    const savedCountry = storageGetItem(STORAGE_KEYS.country)\r\n    const currentCountry = savedCountry ?? country\r\n\r\n    dispatch({\r\n      type: SELECT_COUNTRY,\r\n      payload: currentCountry\r\n    })\r\n\r\n    storageSetItem(STORAGE_KEYS.country, currentCountry)\r\n    dispatch(fetchCountryCase(CASE_TYPES.default))\r\n    dispatch(fetchCountryData(currentCountry))\r\n  }\r\n}\r\n\r\nexport const filteredCountryByDate = (data, dateFrom) => {\r\n  return dispatch => {\r\n    const filteredData = data.filter(item => {\r\n      const dateTS = toTimeStamp(item.date)\r\n      return (\r\n        dateTS >= toTimeStamp(dateFrom)\r\n        && dateTS <= toTimeStamp(data[data.length - 1].date)\r\n      )\r\n    })\r\n\r\n    dispatch({type: FILTERED_DATA, payload: filteredData})\r\n\r\n    dispatch({\r\n      type: SELECT_DATE_FROM_RANGE, payload: {\r\n        min: data[0].date,\r\n        max: filteredData[filteredData.length - 1].date\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateCountryDateFrom = (dateFrom) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.dateFrom, dateFrom)\r\n    dispatch({\r\n      type: SELECT_DATE_FROM,\r\n      payload: dateFrom\r\n    })\r\n  }\r\n}\r\n\r\nexport const updateCountry = (country) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.country, country)\r\n    dispatch({\r\n      type: SELECT_COUNTRY,\r\n      payload: country\r\n    })\r\n    storageRemoveItem(STORAGE_KEYS.dateFrom)\r\n\r\n    dispatch(fetchCurrentCountry(country))\r\n  }\r\n}\r\n\r\nexport const updateCountryCase = (caseValue) => {\r\n  return dispatch => {\r\n    storageSetItem(STORAGE_KEYS.case, caseValue)\r\n    dispatch({\r\n      type: SELECT_CASE,\r\n      payload: caseValue\r\n    })\r\n  }\r\n}\r\n\r\nconst fetchCountryData = (country) => {\r\n  return async dispatch => {\r\n    dispatch(showLoading())\r\n    let byCountry\r\n    try {\r\n      await fetch(`${COVID_API_URL}/dayone/country/${country}`)\r\n          .then(response => {\r\n            return response.json()\r\n          })\r\n          .then((data) => {\r\n            byCountry = data.map(item => ({\r\n              active: item.Active,\r\n              recovered: item.Recovered,\r\n              deaths: item.Deaths,\r\n              confirmed: item.Confirmed,\r\n              date: item.Date\r\n            }))\r\n          })\r\n\r\n      dispatch({type: FETCH_BY_COUNTRY, payload: byCountry})\r\n      dispatch({type: FILTERED_DATA, payload: byCountry})\r\n\r\n      dispatch(fetchCountries())\r\n      dispatch(setRangeDate(byCountry))\r\n      dispatch(fetchCountryDateFrom(byCountry[0].date))\r\n      dispatch(hideLoading())\r\n    } catch (e) {\r\n      dispatch(\r\n          showAlert(`Something went wrong with [${country}] data...`, 8000)\r\n      )\r\n      dispatch(byCountryErrorHandler())\r\n    }\r\n  }\r\n}\r\n\r\nconst fetchCountryCase = (caseType) => {\r\n  return dispatch => {\r\n    const savedCase = storageGetItem(STORAGE_KEYS.case)\r\n\r\n    dispatch({\r\n      type: SELECT_CASE,\r\n      payload: savedCase ?? caseType\r\n    })\r\n  }\r\n}\r\n\r\nconst fetchCountryDateFrom = (dateFrom) => {\r\n  return dispatch => {\r\n    const savedDateFrom = storageGetItem(STORAGE_KEYS.dateFrom)\r\n\r\n    dispatch({\r\n      type: SELECT_DATE_FROM,\r\n      payload: savedDateFrom ?? dateFrom\r\n    })\r\n  }\r\n}\r\n\r\nconst setRangeDate = (data) => {\r\n  return dispatch => {\r\n    const minDate = data[0].date\r\n    const maxDate = data[data.length - 1].date\r\n\r\n    dispatch({\r\n      type: SELECT_DATE_FROM_RANGE,\r\n      payload: {min: minDate, max: maxDate}})\r\n  }\r\n}\r\n\r\nconst byCountryErrorHandler = () => {\r\n  return dispatch => {\r\n    dispatch(updateCountry(DEFAULT_COUNTRY))\r\n    dispatch(fetchCountryData(DEFAULT_COUNTRY))\r\n  }\r\n}\r\n","import React, {useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport Box from '@material-ui/core/Box'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {\r\n  filteredCountryByDate,\r\n  updateCountry,\r\n  updateCountryDateFrom,\r\n  updateCountryCase,\r\n  fetchCurrentCountry\r\n} from '../redux/country/countryActions'\r\n\r\nimport Loader from '../components/UI/Loader'\r\nimport SelectControl from '../components/UI/SelectControl'\r\nimport PercentAreaChart from '../components/PercentAreaChart/PercentAreaChart'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport DatePickerControl from '../components/UI/DatePickerControl'\r\nimport SimpleAreaChart from '../components/SimpleAreaChart/SimpleAreaChart'\r\nimport {CASE_TYPES, DEFAULT_COUNTRY} from '../constants'\r\nimport {caseFilter} from '../utils/case.filter'\r\nimport {withRouter} from 'react-router-dom'\r\nimport dateFilter from '../utils/date.filter'\r\nimport {getCaseItems} from '../utils/helpers.functions'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  box: {\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center'\r\n  },\r\n  controlsPanel: {\r\n    margin: '1rem auto',\r\n    alignItems: 'center',\r\n    justifyContent: 'space-evenly'\r\n  },\r\n  title: {\r\n    margin: '1.5rem auto 0',\r\n    textAlign: 'center'\r\n  }\r\n}))\r\n\r\nconst CountryStatistics = ({history, match}) => {\r\n  const classes = useStyles()\r\n  const dispatch = useDispatch()\r\n  const loading = useSelector(({app}) => app.loading)\r\n\r\n  const dateFromRange = useSelector(({country}) => country.dateFromRange)\r\n  const dateFrom = useSelector(({country}) => country.dateFrom)\r\n\r\n  const countriesList = useSelector(({country}) => country.countriesList)\r\n  const currentCountry = useSelector(({country}) => country.currentCountry)\r\n  const countryData = useSelector(({country}) => country.data)\r\n  const filteredData = useSelector(({country}) => country.filteredData)\r\n\r\n  const caseType = useSelector(({country}) => country.caseType)\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchCurrentCountry(DEFAULT_COUNTRY))\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    // eslint-disable-next-line\r\n    const queryString = `${match.path}?from=${dateFilter(dateFrom)}&country=${currentCountry}&case=${caseType}`.trim()\r\n    history.push(queryString)\r\n  }, [dateFrom, currentCountry, caseType])\r\n\r\n  const onCountryChange = ({target}) => {\r\n    dispatch(updateCountry(target.value))\r\n  }\r\n\r\n  const onDateFromChange = (date) => {\r\n    dispatch(filteredCountryByDate(countryData, date))\r\n    dispatch(updateCountryDateFrom(date))\r\n  }\r\n\r\n  const onCaseChange = ({target}) => {\r\n    dispatch(updateCountryCase(target.value))\r\n  }\r\n\r\n  return (\r\n    <Box m={1} className={classes.box}>\r\n      <Typography variant=\"h4\" component=\"h1\" className={classes.title}>\r\n        Covid-19 Statistics By Country And Status After Date\r\n      </Typography>\r\n\r\n      {loading || !countryData.length\r\n        ? <Loader/>\r\n        :\r\n        <>\r\n          <Grid container className={classes.controlsPanel}>\r\n            <SelectControl\r\n              value={currentCountry}\r\n              items={countriesList}\r\n              label={'Countries'}\r\n              handleChange={onCountryChange}\r\n            />\r\n            <DatePickerControl\r\n              changeHandle={onDateFromChange}\r\n              value={dateFrom}\r\n              minDate={dateFromRange.min}\r\n              maxDate={dateFromRange.max}\r\n              label={'Date from'}\r\n            />\r\n            <SelectControl\r\n              value={caseType}\r\n              items={getCaseItems()}\r\n              label={'Cases'}\r\n              handleChange={onCaseChange}\r\n            />\r\n          </Grid>\r\n          {\r\n            caseType !== CASE_TYPES.default\r\n            ? <SimpleAreaChart\r\n              data={caseFilter(filteredData, caseType)}\r\n              caseType={caseType}\r\n            />\r\n            : <PercentAreaChart data={filteredData}/>\r\n          }\r\n        </>\r\n      }\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default withRouter(CountryStatistics)\r\n","import React from 'react'\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport {makeStyles} from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  content: {\r\n    margin: '5rem auto 0',\r\n    maxWidth: 550\r\n  },\r\n  title: {\r\n    margin: '5rem auto 0',\r\n    textAlign: 'center'\r\n  }\r\n}))\r\n\r\nconst About = () => {\r\n  const styles = useStyles()\r\n  return (\r\n    <Box m={1}>\r\n      <Typography\r\n        className={styles.title}\r\n        variant=\"h3\"\r\n        component=\"h2\"\r\n        gutterBottom\r\n      >\r\n        COVID-19\r\n      </Typography>\r\n      <Typography className={styles.content} variant=\"body1\" gutterBottom>\r\n        The coronavirus COVID-19 pandemic is the defining global\r\n        health crisis of our time and the greatest challenge we\r\n        have faced since World War Two. Since its emergence in\r\n        Asia late last year, the virus has spread to every continent\r\n        except Antarctica.\r\n      </Typography>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default About\r\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\nimport {Switch, Route} from 'react-router-dom'\n\nimport Header from './components/Header/Header'\nimport AlertControl from './components/UI/AlerctControl'\nimport GlobalStatistics from './pages/GlobalStatistics'\nimport CountryStatistics from './pages/CountryStatistics'\nimport About from './pages/About'\n\nfunction App() {\n  return (\n    <>\n      <Header/>\n      <AlertControl />\n      <Container maxWidth=\"md\">\n        <Switch>\n          <Route exact path=\"/\" component={GlobalStatistics}/>\n          <Route exact path=\"/country\" component={CountryStatistics}/>\n          <Route exact path=\"/about\" component={About}/>\n        </Switch>\n      </Container>\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport {Provider} from 'react-redux'\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker'\nimport store from './redux/store'\nimport App from './App'\nimport './index.css'\n\nconst app = (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App/>\n    </BrowserRouter>\n  </Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'))\n\n// // If you want your app to work offline and load faster, you can change\n// // unregister() to register() below. Note this comes with some pitfalls.\n// // Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}